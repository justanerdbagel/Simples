import java.util.*
import java.io.*
import java.math.*
import javax.print.DocFlavor.STRING

/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/
fun main() {
    val building = Building()
    // game loop
    while (true) {
        println(building.controlParse(building.readData()))
        System.err.println("${building.yL} ${building.yR}")
    }
}

class Building() {
    val scan = Scanner(System.`in`)
    val W = scan.nextInt()
    val H = scan.nextInt()
    var N = scan.nextInt()
    var curPos = scan.nextInt() to scan.nextInt()
    var xL = 0
    var yL = 0
    var xR = W - 1
    var yR = H - 1
    val firstCommand = scan.nextLine()
    fun readData() = scan.nextLine() ?: ""


    private fun binarySearch(left: Int, right: Int): Int{
        return  left + (right - left) / 2
    }

    fun controlParse(direction: String): String{
        when (direction) {
            "UL" -> {
                yR = curPos.second - 1
                xR = curPos.first - 1
                curPos = binarySearch( xL, xR) to binarySearch(yL, yR)
                return "${curPos.first} ${curPos.second}"
            }
            "UR" -> {
                yR = curPos.second - 1
                xL = curPos.first + 1
                curPos = binarySearch( xL, xR) to binarySearch( yL, yR)
                return "${curPos.first} ${curPos.second}"
            }
            "DL" -> {
                yL = curPos.second + 1
                xR = curPos.first - 1
                curPos = binarySearch( xL, xR) to binarySearch( yL, yR)
                return "${curPos.first} ${curPos.second}"
            }
            "DR" -> {
                yL = curPos.second + 1
                xL = curPos.first + 1
                curPos = binarySearch( xL, xR) to binarySearch( yL, yR)
                return "${curPos.first} ${curPos.second}"
            }
            "U" -> {
                yR = curPos.second - 1
                curPos = curPos.first to binarySearch( yL, yR)
                return "${curPos.first} ${curPos.second}"
            }
            "D" -> {
                yL = curPos.second + 1
                curPos = curPos.first to binarySearch( yL, yR)
                return "${curPos.first} ${curPos.second}"
            }
            "L" -> {
                xR = curPos.first - 1
                curPos = binarySearch( xL, xR) to curPos.second
                return "${curPos.first} ${curPos.second}"
            }
            else -> {
                xL = curPos.first + 1
                curPos = binarySearch( xL, xR) to curPos.second
                return "${curPos.first} ${curPos.second}"
            }
        }
    }
}