import java.util.*
import kotlin.collections.ArrayDeque

fun main() {
    val input = Scanner(System.`in`)
    val game = Game()
    val n = input.nextInt() // the number of cards for player 1
    for (i in 0 until n) {
        game.deck1.add(game.replaceFirstVal(input.next())) // the n cards of player 1
    }
    val m = input.nextInt() // the number of cards for player 2
    for (i in 0 until m) {
        game.deck2.add(game.replaceFirstVal(input.next())) // the m cards of player 2
    }

    while (!game.isWon() && !game.drawn) {
        System.err.println(game.deck1.toString())
        System.err.println(game.deck2.toString())
        game.battle()
    }
    // Write an answer using println()
    // To debug: System.err.println("Debug messages...");
    if (game.isWon()) {
        println("${game.winner()} ${game.roundCount}")
    }

}

class Game {
    val deck1: ArrayDeque<Int> = ArrayDeque()
    val deck2: ArrayDeque<Int> = ArrayDeque()
    var roundCount = 0
    var drawn = false

    fun battle(){
        roundCount++
        val deck1Card = deck1.elementAt(0)
        val deck2Card = deck2.elementAt(0)
        if (deck1Card == deck2Card) {
            if (deck1.size >= deck2.size) war(deck1, deck2) else war(deck2, deck1)
        } else if (deck1Card > deck2Card) {
            exchangeCards(deck1, deck1)
            exchangeCards(deck1, deck2)
        } else {
            exchangeCards(deck2, deck1)
            exchangeCards(deck2, deck2)
        }
    }

    fun replaceFirstVal(card: String): Int {
        var toReplace: Int
        toReplace = when {
            card.contains('J') -> {
                11
            }
            card.contains('Q') -> {
                12
            }
            card.contains('K') -> {
                13
            }
            card.contains('A') -> {
                14
            }
            card.contains("10") -> {
                10
            }
            else -> {
                card.first().code - 48
            } //Char.code for 1..9 == 1..9
        }
        return toReplace
    }
    private fun war(deckLarge: ArrayDeque<Int>, deckSmall: ArrayDeque<Int>){
        //roundCount++
        for (i in 0 until deckSmall.size step 4) {
            if (deckLarge.elementAt(i) > deckSmall.elementAt(i)) {
                if (deck1 == deckLarge) {
                    repeat (i + 1) { exchangeCards(deckLarge, deckLarge) }
                    repeat (i + 1) { exchangeCards(deckLarge, deckSmall)}
                } else {
                    repeat (i + 1) { exchangeCards(deckLarge, deckSmall)}
                    repeat (i + 1) { exchangeCards(deckLarge, deckLarge) }
                }
                System.err.println("war i = $i")
                return
            } else if(deckLarge.elementAt(i) < deckSmall.elementAt(i)) {
                System.err.println("war - i = $i")
                if (deck1 == deckSmall) {
                    repeat (i + 1) { exchangeCards(deckSmall, deckSmall) }
                    repeat (i + 1) { exchangeCards(deckSmall, deckLarge)}
                } else {
                    repeat (i + 1) { exchangeCards(deckSmall, deckLarge)}
                    repeat (i + 1) { exchangeCards(deckSmall, deckSmall) }
                }
                return
            }
            if (i + 4 > deckSmall.lastIndex)
                isDraw()
        }
    }

    private fun isDraw() {
        println("PAT")
        drawn = true
    }

    fun winner() = if (deck1.isEmpty()) 2 else 1

    fun isWon() = (deck1.isEmpty() || deck2.isEmpty())

    private fun exchangeCards(deckRec: ArrayDeque<Int>, deckSend: ArrayDeque<Int>){
        deckRec.add(deckSend.removeFirst())
    }
}